/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n  // updates the currencies\n  // still needs to have a logic that if it fails, \n  // the variable should have static values\n\n  const exchangeRatesStatic = {\n    \"quotes\": {\n      \"USDBRL\": 5.185203,\n      \"USDCNY\": 7.054298,\n      \"USDEUR\": 0.94975,\n      \"USDINR\": 81.180497,\n      \"USDRUB\": 61.715006\n    },\n    \"source\": \"USD\",\n    \"success\": true,\n    \"timestamp\": 1669964283\n  };\n  function updateCurrencies() {\n    // keep this false to save requests\n    // change to true to fetch from the API\n    let fetching = false;\n    if (fetching) {\n      var myHeaders = new Headers();\n      myHeaders.append(\"apikey\", \"i6Gvyy6na70P0E5YGt4d2FyO7dlu59mk\");\n      let exchangeRates = {};\n      var requestOptions = {\n        method: 'GET',\n        redirect: 'follow',\n        headers: myHeaders\n      };\n      fetch(\"https://api.apilayer.com/currency_data/live?source=USD&currencies=BRL%2CEUR%2CINR%2CRUB%2CCNY\", requestOptions).then(response => response.json()).then(result => {\n        console.log(\"exchange rates updated\");\n        exchangeRates = result;\n      }).catch(error => {\n        // makes sure that exchangeRates will have rates\n        exchangeRates = exchangeRatesStatic;\n        console.error('error', error);\n      });\n      return exchangeRates;\n    } else {\n      console.log(\"exchange rates (not) updated\");\n      return exchangeRatesStatic;\n    }\n  }\n  function fetchingAPI() {\n    // keep this false to save requests\n    let fetching = true;\n    // change to true to fetch from the API\n    var resultStatic = \"bla bla bla\";\n    let resultFromFetch = {};\n    if (fetching) {\n      var baseURL = \"https://api.emailable.com/v1/verify?email=dnovaes@ftc.edu.br&api_key=\";\n      var requestOptions = {\n        method: 'GET'\n      };\n      var apikey = \"test_90f87cd6d7112599232c\";\n      fetch(`${baseURL}${apikey}`).then(response => response.json()).then(result => {\n        console.log(\"exchange rates updated\", result);\n        resultFromFetch = result;\n      }).catch(error => {\n        // makes sure that result will have rates\n        resultFromFetch = resultStatic;\n        console.error('error', error);\n      });\n    } else {\n      console.log(\"exchange rates (not) updated\");\n    }\n    console.log(\"printing result\", resultFromFetch);\n    return resultFromFetch;\n  }\n\n  // static data\n\n  const countries = [\"Brazil\", \"China\", \"India\", \"Spain\", \"Russia\", \"USA\"];\n  const products = {\n    mcchicken: {\n      prices: {\n        \"BRL\": 20.90,\n        \"CNY\": 12,\n        \"EUR\": 4.58,\n        \"INR\": 112,\n        \"RUB\": 100\n      },\n      primaryColor: \"#FFC72C\",\n      secondaryColor: \"#27251F\",\n      title: \"Mc Chicken\",\n      subtitle: \"Burger only, not the meal\",\n      imageOffset: null\n    },\n    corolla: {\n      prices: {\n        \"BRL\": 147790,\n        \"CNY\": 120000,\n        \"EUR\": 22100,\n        \"INR\": 1646000,\n        \"RUB\": 2032000\n      },\n      primaryColor: \"#fff\",\n      secondaryColor: \"#EB0A1E\",\n      title: \"Toyota Corolla\",\n      subtitle: \"2022 model, entry version\",\n      imageOffset: null\n    },\n    jeans: {\n      prices: {\n        \"BRL\": 460,\n        \"CNY\": 439,\n        \"EUR\": 110,\n        \"INR\": 8500,\n        \"RUB\": 8600\n      },\n      primaryColor: \"#C41230\",\n      secondaryColor: \"#fff\",\n      title: \"Levi's Jeans\",\n      subtitle: \"501Â® Original Fit Jeans\",\n      imageOffset: null\n    },\n    iphone: {\n      prices: {\n        \"BRL\": 9499,\n        \"CNY\": 7999,\n        \"EUR\": 1319,\n        \"INR\": 129900,\n        \"RUB\": 99990\n      },\n      primaryColor: \"#000\",\n      secondaryColor: \"#fff\",\n      title: \"iPhone\",\n      subtitle: \"iPhone 14 Pro 128GB\",\n      imageOffset: null\n    },\n    coke: {\n      prices: {\n        \"BRL\": 3.99,\n        \"CNY\": 9.975,\n        // 4-pack price, divided by 4 (39.9/4)\n        \"EUR\": 1.95,\n        \"INR\": 65,\n        \"RUB\": 51.85\n      },\n      primaryColor: \"#F40009\",\n      secondaryColor: \"#fff\",\n      title: \"Coke\",\n      subtitle: \"1L (33oz) bottle\",\n      imageOffset: null\n    }\n  };\n  window.products = products;\n\n  // national average minimum wage: 22 CNY per hour\n  // national average is about 5000 CNY per month\n\n  const minimumWage = {\n    \"BRL\": 1212,\n    \"CNY\": 3872,\n    // yuan / rmb => ChiNeseYuan\n    \"EUR\": 1050,\n    \"INR\": 9306,\n    \"RUB\": 13617\n  };\n\n  // populate section \"products\"\n  function populateProducts() {\n    console.log(\"populating products\");\n    const productsContainer = document.getElementById(\"products\");\n    Object.entries(products).forEach(product => {\n      console.log(\"now populating \" + product[1].title);\n      const div = document.createElement(\"div\");\n      div.setAttribute(\"id\", product[0]);\n      div.setAttribute(\"style\", `background-color:${product[1].primaryColor};color:${product[1].secondaryColor}`);\n      const h1 = document.createElement(\"h1\");\n      h1.innerHTML = product[1].title;\n      div.appendChild(h1);\n      const h2 = document.createElement(\"h2\");\n      h2.innerHTML = product[1].subtitle;\n      div.appendChild(h2);\n      productsContainer.appendChild(div);\n      const ul = document.createElement(\"ul\");\n      div.appendChild(ul);\n      const productPrices = listPrices(product);\n      productPrices.forEach(price => {\n        const li = document.createElement(\"li\");\n        li.innerHTML = price;\n        ul.appendChild(li);\n      });\n    });\n  }\n  function repopulateAfterUpdateCurrencies() {\n    // updateCurrencies()\n    populateProducts();\n  }\n  const btnUpdate = document.querySelector(\"header button\");\n  // btnUpdate.addEventListener(\"click\",repopulateAfterUpdateCurrencies)\n  populateProducts();\n  btnUpdate.addEventListener(\"click\", () => {\n    const resultFromClick = fetchingAPI();\n    console.log(resultFromClick);\n  });\n\n  // formats the timestamp\n\n  const formattedTimestamp = timestamp => {\n    let unix_timestamp = exchangeRateResponse.timestamp;\n    // Create a new JavaScript Date object based on the timestamp\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n    var date = new Date(unix_timestamp * 1000);\n    // Hours part from the timestamp\n    var hours = date.getHours();\n    // Minutes part from the timestamp\n    var minutes = \"0\" + date.getMinutes();\n    // Seconds part from the timestamp\n    var seconds = \"0\" + date.getSeconds();\n\n    // Will display time in 10:30:23 format\n    var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n  };\n\n  // calculates the conversion\n  function _convertCurrency(currency, cost) {\n    let rate = exchangeRatesStatic.quotes[\"USD\" + currency];\n    return cost / rate;\n  }\n\n  // returns the object of a product with converted prices \n  function listPrices(product) {\n    let prices = [];\n    Object.entries(product[1].prices).forEach(country => {\n      prices.push(_convertCurrency(country[0], country[1]).toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }));\n    });\n    return prices;\n  }\n\n  // swapping country names\n  var i = 0;\n  var text = \"USA\";\n  document.querySelector(\"h2 span\").innerHTML = countries.length;\n  function _getChangedText() {\n    i = (i + 1) % countries.length;\n    // console.log(countries[i]);\n    // console.log(i);\n    return text.replace(/USA/, countries[i]);\n  }\n  function _changeText() {\n    var txt = _getChangedText();\n    // console.log(txt);\n    document.querySelector(\"h1 span\").innerHTML = txt;\n  }\n  setInterval(_changeText, 2500);\n  {/* <span id=\"changer\">This is cool</span> */}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;